## TODO attribution entity


##
#  Enums start
##
enum GenerationName {
	ONE,
    TWO,
    THREE,
    FOUR,
    FIVE
}

enum SeriesName {
    PROMO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE
}

enum WaveName {
 PRIME,
 REPLICANT
}

enum GenderName {
    ANY,
    MALE,
    FEMALE
}

enum GeneName {
	SKIN_TONE,
	HAIR_COLOR,
	EYE_COLOR,
	BG_COLOR,
	BACKDROP,
	EARS,
	FACE,
	NOSE,
	MOUTH,
	FACIAL_FEATURE,
	EYES,
	HAIR_STYLE
}

enum RarityName {
	COMMON,
	UNCOMMON,
	RARE,
	EPIC,
	LEGENDARY
}

##
#  Enums end
##


##
#  States and globals start
##

type MetadataState @entity {
	"Internal ID used for indexation"
	id: ID!

	"Current metadata contract address"
	address: Bytes
}

type TeleporterState @entity {
	"Internal ID used for indexation"
	id: ID!

	"Current teleporter contract address"
	address: Bytes

	"Current teleporter contract status"
	paused: Boolean
}

type PrimeMinterState @entity {
	"Internal ID used for indexation"
	id: ID!
	
	"Current prime minter contract address"
	address: Bytes

	"Current prime minter contract status"
	paused: Boolean
}

type GlobalState @entity {
	"Internal ID used for indexation"
	id: ID!

	"AvastarsPrimeMinter current state"
	primeMinter: PrimeMinterState! 

	"AvastarsTeleporter current state"
	teleporter: TeleporterState! 

	"AvastarsMetadata current state"
	metadata: MetadataState! 

	"Current series name"
	currentSeries: Series 

	"Current generation name"
	currentGeneration: Generation 

}


##
#  States and globals end
##



##
#  Common entities start
##

type Generation @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current generation name (1 to 5)"
	name: GenerationName

	"avastars from this generation"
	avastars: [Avastar!]! @derivedFrom(field: "generation")

	"avastars minted on this generation"
	minted: BigInt!

	"traits on this generation"
	traits: [Trait!]! @derivedFrom(field: "generation")

}

type Gender @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current gender name (any or female or male)"
	name: GenderName

	"avastars from this series"
	avastars: [Avastar!]! @derivedFrom(field: "gender")

	"avastars minted for this gender"
	minted: BigInt!

	"traits with this gender"
	traits: [Trait!]! @derivedFrom(field: "gender")
}

type Wave @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current wave name prime / replicant"
	name: WaveName 

	"avastars from this wave"
	avastars: [Avastar!]! @derivedFrom(field: "wave")

	"avastars minted on this generation"
	minted: BigInt!

	# rarestAvastar: Avastar // BigInt (??)
}


type Gene @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current gene name "
	name: GeneName

	"Traits with this gene"
	traits: [Trait!]! @derivedFrom(field: "gene")

	"traits minted for this gene"
	minted: BigInt!
}

type Rarity @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current rarity name "
	name: RarityName

	"traits with this rarity"
	traits: [Trait!]! @derivedFrom(field: "rarity")

	"traits minted for this rarity"
	minted: BigInt!
}

type Series @entity {
 	"Internal ID used for indexation"
	id: ID!

	"current series name ( promo or 1 to 5)"
	name: String 

	"avastars from this series"
	avastars: [Avastar!]! @derivedFrom(field: "series")

	"avastars minted on this series"
	minted: BigInt!

	"Traits minted for this serie"
	traits: [TraitSerie!]! @derivedFrom(field: "series")
}

##
#  Common entities end
##



##
#  Traits entities start
##


# lookup table for many to many 
type TraitSerie @entity {
	"Internal ID used for indexation"
  	id: ID!   # Set to `${user.id}-${organization.id}`

	"Trait id"  
  	trait: Trait!

	"Serie id"  
  	series: Series!
}

type Trait @entity {
 	"Internal ID used for indexation"
	id: ID!

	"Trait generation"
	generation: Generation

	"Trait gender"
	gender: Gender

	"Trait gene, ration the generation of the trait"
	gene: Gene

	"Trait ratiy level"
	rarity: Rarity

	"Variation of the gene the trait represents"
	variation: BigInt 

	"Series of the trait"
	series: [TraitSerie!]! @derivedFrom(field: "trait")
 
	"Trait's name ie: Cat Nose"
	name: String

	"the fully rendered SVG for the Avastar" # see func assembleArtwork
	svg: String
}


##
#  Traits entities end
##



##
#  Avastars entities start
##

type Avastar @entity {
	"Internal ID used for indexation"
	id: ID!

	"current avastar serial"
	serial: BigInt

	"avastar generation"
	generation: Generation

	"avastar series"
	series: Series

	"avastars gender"
	gender: Gender

	# This will be kept as the id only to avoid contract calls as traits are stored on chain 
	"Traits related to the avastar"
	traits: Trait

	# will be get at Transfer event from address 0
	"avastar's current owner"
	owner: Account!

	"It's this avastar prime or replicant"
	wave: Wave

	"If it's prime, does it have replicants?"
	replicated: Boolean
}


##
#  Avastars entities end
##



##
#  Transactions entities start
##



type Account @entity {
	"Internal ID used for indexation"
	id: ID!

	"Account evm address"
	address: Bytes

	"owned avastars"
	avastars: [Avastar!]! @derivedFrom(field: "owner")
	
	"Transactions sent by this account"
	sent: [Transaction!] @derivedFrom(field: "from")
 
	"Transactions recieved by this account"
	recieved: [Transaction!] @derivedFrom(field: "to")

	"ath recieved as form of token burning"
	ethBalance: BigInt!

	# approvalsOwner:               [Approval!]! @derivedFrom(field: "owner")
	# approvalsApproved:            [Approval!]! @derivedFrom(field: "approved")
	# approvalsForAllOwner:         [ApprovalForAll!]! @derivedFrom(field: "owner")
	# approvalsForAllOperator:      [ApprovalForAll!]! @derivedFrom(field: "operator")
}



enum TranasctionType { 
	MINT 
 }


interface Transaction {
 	"Internal ID used for indexation"
	id: ID!

	"Seller account"
	from: Account

	"Buyer account"
	to: Account

	"Avastar traded"
	token: Avastar

	"Amount of tokens or ether"
	amount: BigInt

	"Transaction creation timestamp"
	timestamp: BigInt!

	"Current transaction type"
	type: TranasctionType!
}


type Mint implements Transaction @entity {
	"Internal ID used for indexation"
	id: ID!

	"Seller account"
	from: Account

	"Buyer account"
	to: Account

	"Avastar traded"
	token: Avastar

	"Transaction creation timestamp"
	timestamp: BigInt!

	"Current transaction type"
	type: TranasctionType!
}

type Burn implements Transaction @entity {
	"Internal ID used for indexation"
	id: ID!

	"Seller account"
	from: Account

	"Buyer account"
	to: Account

	"Avastar traded"
	token: Avastar

	"Transaction creation timestamp"
	timestamp: BigInt!

	"Current transaction type"
	type: TranasctionType!
}

type Transfer implements Transaction @entity {
	"Internal ID used for indexation"
	id: ID!

	"Seller account"
	from: Account

	"Buyer account"
	to: Account

	"Avastar traded"
	token: Avastar

	"Transaction creation timestamp"
	timestamp: BigInt!

	"Current transaction type"
	type: TranasctionType!
}